[{"id":"6e9f1b3.f9160e4","type":"mqtt-broker","broker":"winter.ceit.uq.edu.au","port":"1883","clientid":""},{"id":"e3fec925.2c1cb","type":"websocket-listener","path":"/ws/location","wholemsg":"false"},{"id":"6694019.f996c","type":"websocket out","name":"","server":"e3fec925.2c1cb","x":789.6666870117188,"y":140.6666603088379,"z":"8f1293ca.70ed7","wires":[]},{"id":"883e7de8.77c18","type":"websocket in","name":"","server":"e3fec925.2c1cb","x":362.6666564941406,"y":192.66666793823242,"z":"8f1293ca.70ed7","wires":[["1ae8815a.e5177f"]]},{"id":"80674850.7f98b8","type":"http in","name":"Ferry Map Server","url":"/map","method":"get","x":221.6666259765625,"y":318.6666488647461,"z":"8f1293ca.70ed7","wires":[["158935a1.ea76ca"]]},{"id":"7bbdefd6.84421","type":"http response","name":"","x":669.6666259765625,"y":318.6666488647461,"z":"8f1293ca.70ed7","wires":[]},{"id":"1ae8815a.e5177f","type":"function","name":"function 2","func":"// The received message is stored in 'msg'\n// It will have at least a 'payload' property:\n//   console.log(msg.payload);\n// The 'context' object is available to store state\n// between invocations of the function\n//   context = {};\n\nmsg.payload = context.global.location;\n\nreturn msg;","outputs":1,"x":591.6666564941406,"y":187.66669082641602,"z":"8f1293ca.70ed7","wires":[["6694019.f996c"]]},{"id":"452a308a.bad5d","type":"function","name":"function 1","func":"// The received message is stored in 'msg'\n// It will have at least a 'payload' property:\n//   console.log(msg.payload);\n// The 'context' object is available to store state\n// between invocations of the function\n//   context = {};\ncontext.global.location = msg.payload;\n\nreturn msg;","outputs":1,"x":591.6666564941406,"y":96.66666793823242,"z":"8f1293ca.70ed7","wires":[["6694019.f996c"]]},{"id":"10713043.ef8ed","type":"mqtt in","name":"UQferryData","topic":"/uq/ferry/JSON","broker":"6e9f1b3.f9160e4","x":214.66665649414062,"y":97.66666030883789,"z":"8f1293ca.70ed7","wires":[["9c5e409b.63a1c"]]},{"id":"9c5e409b.63a1c","type":"function","name":"test","func":"//var date = msg.payload.date;\n\nconsole.log(msg.payload);\n\nvar x = JSON.parse(msg.payload);\nconsole.log(x.time);\n\nmsg.payload = '[{\"lat\":\"' + x.latitude + \n\t\t'\",\"lng\":\"' + x.longitude +\n\t\t'\",\"mssi\":\"' + x.mssi +\n\t\t'\",\"speed\":\"' + x.speed +\n\t\t'\",\"time\":\"' + x.time + '\"}]'; \n//\t\t'\"}]'; \n\nconsole.log(msg.payload);\n\nreturn msg;","outputs":1,"x":423.6666564941406,"y":97,"z":"8f1293ca.70ed7","wires":[["452a308a.bad5d","76d9c1a9.89264"]]},{"id":"158935a1.ea76ca","type":"template","name":"TrackFerry","field":"payload","template":"<!DOCTYPE html>\n<html>\n<head>\n  <title>UQFerry Live Map</title>\n  <script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=true\"></script>\n  <!--<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-1.10.2.js\"></script>-->\n \n  <style type=\"text/css\" media=\"screen\">\n/*    #update {\n      float: left;\n      top: 30px; right: 50px;\n    }, */\n    #map {\n      position:absolute;\n      top: 30px; bottom: 0; left: 0; right: 0;\n    }\n    #timeers {\n      position:absolute;\n      top: 0px; left: 0; right: 0; height: 30px;\n    }\n  </style>\n</head>\n<body>\n  <div id=\"timers\">Hello</div>\n  <div id=\"map\"></div>\n  <script type=\"application/javascript\">\n    //var socketaddy = \"ws://130.102.86.57:1880/ws/location\";\n    var socketaddy = \"ws://localhost:1880/ws/location\";\n    var map;\n    var markers = [];\n    var sock;\n    var lines = [];\n    \n    /**\n\t * Data for the markers consisting of a name, a LatLng and a zIndex for\n\t * the order in which these markers should display on top of each\n\t * other.\n\t */\n\tvar terminus = [\n\t  ['UQ', {lat: -27.493579, lng: 153.016776}],\n\t  ['West End', {lat: -27.490241, lng: 153.003364}],\n\t  ['Guyatt Park', {lat: -27.492313, lng: 153.001872}],\n\t  ['Regatta CLOSED from 20 October 2014', {lat: -27.483213, lng: 152.996813}],\n\t  ['Milton', {lat: -27.473608, lng: 153.005786}],\n\t  ['North Quay', {lat: -27.472671, lng: 153.022412}],\n\t  ['South Bank 1', {lat: -27.475831, lng: 153.022207}],\n\t  ['South Bank 2', {lat: -27.476124, lng: 153.022389}],\n\t  ['South Bank 3', {lat: -27.479792, lng: 153.025037}],\n\t  ['Maritime Museum CLOSED from 17 Feb', {lat: -27.481873, lng: 153.0283}],\n\t  ['Thornton Street', {lat: -27.471224, lng: 153.034033}],\n\t  ['Holman Street', {lat: -27.465691, lng: 153.033569}],\n\t  ['Dockside', {lat: -27.472471, lng: 153.039021}],\n\t  ['Mowbray Park', {lat: -27.477292, lng: 153.043254}],\n\t  ['Hawthorne CLOSED from 15th Dec 2014', {lat: -27.4612, lng: 153.053415}],\n\t  ['Bulimba', {lat: -27.450438, lng: 153.052247}],\n\t  ['Norman Park', {lat: -27.474348, lng: 153.053648}],\n\t  ['Bretts Wharf', {lat: -27.440123, lng: 153.062017}],\n\t  ['Teneriffe', {lat: -27.45169, lng: 153.049247}],\n\t  ['New Farm Park', {lat: -27.471721, lng: 153.052482}],\n\t  ['Sydney Street CLOSED from 5th Jan', {lat: -27.474786, lng: 153.042187}],\n\t  ['Riverside', {lat: -27.467087, lng: 153.031222}],\n\t  ['Eagle Street Pier', {lat: -27.468797, lng: 153.030953}],\n\t  ['North Quay 1 CLOSED from 9th March', {lat: -27.472672, lng: 153.022457}],\n\t  ['Apollo Rd', {lat: -27.443359, lng: 153.063787}],\n\t  ['Northshore Hamilton', {lat: -27.445244, lng: 153.083872}],\n\t  ['QUT', {lat: -27.476409, lng: 153.025013}]\n\t];\n\tvar image_ferry = {\n\t\turl: 'images/CityCat.png',\n\t\tsize: new google.maps.Size(20,32),\n\t\torigin: new google.maps.Point(0,0),\n\t\tanchor: new google.maps.Point(0,32)\n\t};\n\tvar image_terminus = {\n\t\turl: '/Users/markschulz/Documents/images/blueDot.png',\n\t\tsize: new google.maps.Size(10,16),\n\t\torigin: new google.maps.Point(8,8),\n\t\tanchor: new google.maps.Point(0,16)\n\t};\n\t\n\tfunction initialize() {\n\t\tvar mapCentre = {lat: -27.458083, lng: 153.033573};\n\t\tvar UQterminus = {lat: -27.493569, lng: 153.016782};\n\t\tvar mapOptions = {\n\t\t\tzoom: 14,\n\t\t\tcenter: mapCentre\n\t\t};\n\t\t\n\t\tmap = new google.maps.Map(document.getElementById('map'), mapOptions);\n\t\t\n\t\t// Add a marker for each terminus\n\t\tsetTerminus();\n\t\t\n\t  //Open up a websocket to get the real time data from the ferry position\n      sock = new WebSocket(socketaddy);\n      sock.onopen = function(){ \n      \t  console.log(\"Connected websocket\");\n\t      console.log(\"Sending ping..\");\n\t      sock.send(\"Ping!\");\n\t      console.log(\"Ping sent..\");\n      };\n      sock.onerror = function(){ \n      \tconsole.log(\"Websocket error\"); \n      };\n      \n      sock.onmessage = function(evt){\n        var latlng = JSON.parse(evt.data);\n        var latPosn = parseFloat(latlng[0].lat);\n        var lngPosn = parseFloat(latlng[0].lng);\n        var speed = parseFloat(latlng[0].speed);\n        var msgTime = latlng[0].time;\n        \n      \tconsole.log(\"Got marker at \" + latPosn + \", \" + lngPosn + \", \" + latlng[0].mssi);\n      \tconsole.log(\"Time: \" + msgTime);\n\t\tdocument.getElementById(\"timers\").innerHTML = \"Last update at \" + msgTime;\n      \t\n        addMarker({lat: latPosn, lng: lngPosn}, latlng[0].mssi, speed);\n      };\n\t}\n\t\n\tfunction setTerminus() {\n\t\tfor (var i = 0; i < terminus.length; i++) {\n\t\t\tvar spot = terminus[i][0];\n\t\t\tvar latlng = terminus[i][1];\n\t\t\tvar marker = new google.maps.Marker({\n\t\t\t\tposition: latlng,\n\t\t\t\tmap: map,\n\t\t\t\ticon: 'http://www.googlemapsmarkers.com/v1/T/0099FF/FFFFFF/FF0000/',\n\t\t\t\ttitle: spot\n\t\t\t})\n\t\t}\n\t}\n\t\n\t// Define a symbol using a predefined path (an arrow)\n\t// supplied by the Google Maps JavaScript API.\n\tvar lineSymbol = {\n    \tpath: google.maps.SymbolPath.FORWARD_CLOSED_ARROW\n\t};\n\n\tfunction addMarker(location, title, speed) {\n\t\tvar marker;\n\t\tvar line;\n\t\t\n\t\tif (title in markers) {\n\t\t\tmarker = markers[title];\n\t\t\t// delete old marker, if there is one\n\t\t\tmarker.setMap(null);\n\t\t\tclearTimeout(marker.timeoutName);\n\t\t\t\n\t\t\t// Add some 'wake' to each ferry as it moves along.\n\t\t\tif (speed > 0) {\n\t\t\t\t// Delete old lines(wakes)\n\t\t\t\tconsole.log(\"Moving \" + title + \" from (\" + marker.position + \") to (\"+location.lat+\",\"+location.lng+\") at speed \" + speed);\n\t\t\t\tif (title in lines) {\n\t\t\t\t\tconsole.log('Delete wake for ' + title);\n\t\t\t\t\tlines[title].setMap(null);\n\t\t\t\t\tdelete lines[title];\n\t\t\t\t}\n\t\t\t\t// Draw in the new wake (line)\n\t\t\t\tconsole.log('Add wake to ' + title);\n\t\t\t\tline = new google.maps.Polyline({\n\t\t\t\t\tpath: [marker.position, location],\n\t\t\t\t\ticons: [{\n\t\t\t\t\t\tico: lineSymbol,\n\t\t\t\t\t\toffset: '100%'\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t\tlines[title] = line;\n\t\t\t\tline.setMap(map);\n\t\t\t}\n\t\t\t// now remove the ferry from the list, after the 'wake has been drawn.\n\t\t\tdelete markers[title];\n\t\t}\n\t\t\n\t\tsetTimeout(function(){ console.log(\"Hello\") }, 3000);\n\n\t\t// Drop the new marker, and remove after 'removeTime'.\n\t\tvar removeTime = setTimeout(function() { deleteMarker(title) }, 180000);\t\t// 3 minutes?? == 3*60*1000 == 180,000\n\t\tmarker = new google.maps.Marker({\n\t\t\tposition: location,\n\t\t\ttimeoutName: removeTime,\n\t\t\t//icon: ferry_image,\n\t\t\ttitle: title\n\t\t});\n\t\tmarker.setMap(map);\n\t\tmarkers[title] = marker;\n\t}\n\t\n\tfunction deleteMarker(title) {\n\t\t// Delete lines ('wakes') that have hung around too long too.\n\t\tconsole.log('deleting old marker for ' + title);\n\t\tmarkers[title].setMap(null);\n\t\tdelete markers[title];\n\t\t\n\t\t// Delete lines ('wakes') that have hung around too long too.\n\t\tif (title in lines) {\n\t\t\tconsole.log('deleting old wake for ' + title);\n\t\t\tlines[title].setMap(null);\n\t\t\tdelete lines[title];\n\t\t}\t\n\t}\n\t\n\tgoogle.maps.event.addDomListener(window, 'load', initialize);\n\t\t\n  </script>\n</body>\n</html>","x":455.66656494140625,"y":317.6666793823242,"z":"8f1293ca.70ed7","wires":[["7bbdefd6.84421"]]},{"id":"76d9c1a9.89264","type":"debug","name":"","active":true,"console":"false","complete":"false","x":830.6666564941406,"y":27.99999745686849,"z":"8f1293ca.70ed7","wires":[]}]
